import{a4 as C,a3 as a,a5 as i,am as d,a6 as w,a7 as W,b4 as v,a9 as b,aa as y,ab as A,ac as T,b5 as k,af as R,ag as S,ae as E,ah as N,b6 as F,b7 as I,ai as U,aj as x,X as c,aR as m,ak as M,al as O}from"./index-f0c6a3e2.js";import{S as _}from"./erc-721-standard-3562493a.browser.esm-38cdb4f7.js";import{P as L}from"./thirdweb-checkout-c75a4919.browser.esm-056c3159.js";class l extends _{constructor(t,r,n){var o;let p=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},h=arguments.length>4?arguments[4]:void 0,u=arguments.length>5?arguments[5]:void 0,g=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new C(t,r,h,p);super(g,n,u),o=this,a(this,"abi",void 0),a(this,"encoder",void 0),a(this,"estimator",void 0),a(this,"metadata",void 0),a(this,"app",void 0),a(this,"sales",void 0),a(this,"platformFees",void 0),a(this,"events",void 0),a(this,"roles",void 0),a(this,"interceptor",void 0),a(this,"royalties",void 0),a(this,"claimConditions",void 0),a(this,"revealer",void 0),a(this,"checkout",void 0),a(this,"owner",void 0),a(this,"createBatch",i(async(e,s)=>this.erc721.lazyMint.prepare(e,s))),a(this,"claimTo",i(async function(e,s){let f=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return o.erc721.claimTo.prepare(e,s,{checkERC20Allowance:f})})),a(this,"claim",i(async function(e){let s=arguments.length>1&&arguments[1]!==void 0?arguments[1]:!0;return o.claimTo.prepare(await o.contractWrapper.getSignerAddress(),e,s)})),a(this,"burn",i(async e=>this.erc721.burn.prepare(e))),a(this,"transfer",i(async(e,s)=>this.erc721.transfer.prepare(e,s))),a(this,"setApprovalForAll",i(async(e,s)=>this.erc721.setApprovalForAll.prepare(e,s))),a(this,"setApprovalForToken",i(async(e,s)=>d.fromContractWrapper({contractWrapper:this.contractWrapper,method:"approve",args:[e,s]}))),this.abi=w.parse(h||[]),this.metadata=new W(this.contractWrapper,v,this.storage),this.app=new b(this.contractWrapper,this.metadata,this.storage),this.roles=new y(this.contractWrapper,l.contractRoles),this.royalties=new A(this.contractWrapper,this.metadata),this.sales=new T(this.contractWrapper),this.claimConditions=new k(this.contractWrapper,this.metadata,this.storage),this.encoder=new R(this.contractWrapper),this.estimator=new S(this.contractWrapper),this.events=new E(this.contractWrapper),this.platformFees=new N(this.contractWrapper),this.revealer=new F(this.contractWrapper,this.storage,I.name,()=>this.erc721.nextTokenIdToMint()),this.interceptor=new U(this.contractWrapper),this.owner=new x(this.contractWrapper),this.checkout=new L(this.contractWrapper)}onNetworkUpdated(t){this.contractWrapper.updateSignerOrProvider(t)}getAddress(){return this.contractWrapper.readContract.address}async totalSupply(){const t=await this.totalClaimedSupply(),r=await this.totalUnclaimedSupply();return t.add(r)}async getAllClaimed(t){const r=c.from((t==null?void 0:t.start)||0).toNumber(),n=c.from((t==null?void 0:t.count)||m).toNumber(),o=Math.min((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r+n);return await Promise.all(Array.from(Array(o).keys()).map(p=>this.get(p.toString())))}async getAllUnclaimed(t){const r=c.from((t==null?void 0:t.start)||0).toNumber(),n=c.from((t==null?void 0:t.count)||m).toNumber(),o=c.from(Math.max((await this.contractWrapper.readContract.nextTokenIdToClaim()).toNumber(),r)),p=c.from(Math.min((await this.contractWrapper.readContract.nextTokenIdToMint()).toNumber(),o.toNumber()+n));return await Promise.all(Array.from(Array(p.sub(o).toNumber()).keys()).map(h=>this.erc721.getTokenMetadata(o.add(h).toString())))}async totalClaimedSupply(){return this.erc721.totalClaimedSupply()}async totalUnclaimedSupply(){return this.erc721.totalUnclaimedSupply()}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(M("transfer"),O)}async getClaimTransaction(t,r){let n=arguments.length>2&&arguments[2]!==void 0?arguments[2]:!0;return this.erc721.getClaimTransaction(t,r,{checkERC20Allowance:n})}async get(t){return this.erc721.get(t)}async ownerOf(t){return this.erc721.ownerOf(t)}async balanceOf(t){return this.erc721.balanceOf(t)}async balance(){return this.erc721.balance()}async isApproved(t,r){return this.erc721.isApproved(t,r)}async prepare(t,r,n){return d.fromContractWrapper({contractWrapper:this.contractWrapper,method:t,args:r,overrides:n})}async call(t,r,n){return this.contractWrapper.call(t,r,n)}}a(l,"contractRoles",["admin","minter","transfer"]);export{l as NFTDrop};
