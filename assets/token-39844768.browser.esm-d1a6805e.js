import{a9 as t,ar as d,a2 as u,aH as f,aa as W,ab as c,as as g,aw as m,ac as v,ad as w,bv as y,af as C,ag as b,ai as T,ak as E,al as R,am as S,an as A,ao as B,bw as F,aq as V}from"./index-aa0b681f.js";import{S as O}from"./erc-20-standard-6e80fd68.browser.esm-f489f286.js";class P{constructor(e,s){t(this,"events",void 0),t(this,"contractWrapper",void 0),this.contractWrapper=e,this.events=s}async getAllHolderBalances(){const s=(await this.events.getEvents("Transfer")).map(r=>r.data),a={};return s.forEach(r=>{const o=r==null?void 0:r.from,i=r==null?void 0:r.to,p=r==null?void 0:r.value;o!==d&&(o in a||(a[o]=u.from(0)),a[o]=a[o].sub(p)),i!==d&&(i in a||(a[i]=u.from(0)),a[i]=a[i].add(p))}),Promise.all(Object.keys(a).map(async r=>({holder:r,balance:await f(this.contractWrapper.getProvider(),this.contractWrapper.readContract.address,a[r])})))}}class l extends O{constructor(e,s,a){let r=arguments.length>3&&arguments[3]!==void 0?arguments[3]:{},o=arguments.length>4?arguments[4]:void 0,i=arguments.length>5?arguments[5]:void 0,p=arguments.length>6&&arguments[6]!==void 0?arguments[6]:new W(e,s,o,r);super(p,a,i),t(this,"abi",void 0),t(this,"metadata",void 0),t(this,"app",void 0),t(this,"roles",void 0),t(this,"encoder",void 0),t(this,"estimator",void 0),t(this,"history",void 0),t(this,"events",void 0),t(this,"platformFees",void 0),t(this,"sales",void 0),t(this,"signature",void 0),t(this,"interceptor",void 0),t(this,"mint",c(async n=>this.erc20.mint.prepare(n))),t(this,"mintTo",c(async(n,h)=>this.erc20.mintTo.prepare(n,h))),t(this,"mintBatchTo",c(async n=>this.erc20.mintBatchTo.prepare(n))),t(this,"delegateTo",c(async n=>g.fromContractWrapper({contractWrapper:this.contractWrapper,method:"delegate",args:[await m(n)]}))),t(this,"burn",c(n=>this.erc20.burn.prepare(n))),t(this,"burnFrom",c(async(n,h)=>this.erc20.burnFrom.prepare(n,h))),this.abi=v.parse(o||[]),this.metadata=new w(this.contractWrapper,y,this.storage),this.app=new C(this.contractWrapper,this.metadata,this.storage),this.roles=new b(this.contractWrapper,l.contractRoles),this.sales=new T(this.contractWrapper),this.events=new E(this.contractWrapper),this.history=new P(this.contractWrapper,this.events),this.encoder=new R(this.contractWrapper),this.estimator=new S(this.contractWrapper),this.platformFees=new A(this.contractWrapper),this.interceptor=new B(this.contractWrapper),this.signature=new F(this.contractWrapper,this.roles)}async getVoteBalance(){return await this.getVoteBalanceOf(await this.contractWrapper.getSignerAddress())}async getVoteBalanceOf(e){return await this.erc20.getValue(await this.contractWrapper.readContract.getVotes(e))}async getDelegation(){return await this.getDelegationOf(await this.contractWrapper.getSignerAddress())}async getDelegationOf(e){return await this.contractWrapper.readContract.delegates(await m(e))}async isTransferRestricted(){return!await this.contractWrapper.readContract.hasRole(V("transfer"),d)}async getMintTransaction(e,s){return this.erc20.getMintTransaction(e,s)}async prepare(e,s,a){return g.fromContractWrapper({contractWrapper:this.contractWrapper,method:e,args:s,overrides:a})}async call(e,s,a){return this.contractWrapper.call(e,s,a)}}t(l,"contractRoles",["admin","minter","transfer"]);export{l as Token};
